[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_names",
        "importPath": "data_structures",
        "description": "data_structures",
        "isExtraImport": true,
        "detail": "data_structures",
        "documentation": {}
    },
    {
        "label": "get_spiciest_foods",
        "importPath": "data_structures",
        "description": "data_structures",
        "isExtraImport": true,
        "detail": "data_structures",
        "documentation": {}
    },
    {
        "label": "print_spicy_foods",
        "importPath": "data_structures",
        "description": "data_structures",
        "isExtraImport": true,
        "detail": "data_structures",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "data_structures",
        "description": "data_structures",
        "isExtraImport": true,
        "detail": "data_structures",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-data-structures-lab\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-data-structures-lab\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-data-structures-lab\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-data-structures-lab\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-p3-data-structures-lab\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "pytest_itemcollected",
        "kind": 2,
        "importPath": "lib.testing.conftest",
        "description": "lib.testing.conftest",
        "peekOfCode": "def pytest_itemcollected(item):\n    par = item.parent.obj\n    node = item.obj\n    pref = par.__doc__.strip() if par.__doc__ else par.__class__.__name__\n    suf = node.__doc__.strip() if node.__doc__ else node.__name__\n    if pref or suf:\n        item._nodeid = ' '.join((pref, suf))",
        "detail": "lib.testing.conftest",
        "documentation": {}
    },
    {
        "label": "TestDataStructures",
        "kind": 6,
        "importPath": "lib.testing.data_structures_test",
        "description": "lib.testing.data_structures_test",
        "peekOfCode": "class TestDataStructures:\n    '''Module data_structures.py'''\n    SPICY_FOODS = [\n        {\n            \"name\": \"Green Curry\",\n            \"cuisine\": \"Thai\",\n            \"heat_level\": 9,\n        },\n        {\n            \"name\": \"Buffalo Wings\",",
        "detail": "lib.testing.data_structures_test",
        "documentation": {}
    },
    {
        "label": "get_names",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def get_names(spicy_foods):\n    return [spicy_food[\"name\"] for spicy_food in spicy_foods]\ndef get_spiciest_foods(spicy_foods):\n    return [spicy_food for spicy_food in spicy_foods if spicy_food[\"heat_level\"] > 5]\ndef print_spicy_foods(spicy_foods):\n    for spicy_food in spicy_foods:\n        return f'{spicy_food[\"name\"]} ({spicy_food[\"cuisine\"]}) | Heat Level: {\"ðŸŒ¶\" * spicy_food[\"heat_level\"]})\ndef get_spicy_food_by_cuisine(spicy_foods, cuisine):\n    for spicy_food in spicy_foods:\n        if spicy_food[\"cuisine\"] == cuisine:",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "get_spiciest_foods",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def get_spiciest_foods(spicy_foods):\n    return [spicy_food for spicy_food in spicy_foods if spicy_food[\"heat_level\"] > 5]\ndef print_spicy_foods(spicy_foods):\n    for spicy_food in spicy_foods:\n        return f'{spicy_food[\"name\"]} ({spicy_food[\"cuisine\"]}) | Heat Level: {\"ðŸŒ¶\" * spicy_food[\"heat_level\"]})\ndef get_spicy_food_by_cuisine(spicy_foods, cuisine):\n    for spicy_food in spicy_foods:\n        if spicy_food[\"cuisine\"] == cuisine:\n            return spicy_food\ndef print_spiciest_foods(spicy_foods):",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "print_spicy_foods",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def print_spicy_foods(spicy_foods):\n    for spicy_food in spicy_foods:\n        return f'{spicy_food[\"name\"]} ({spicy_food[\"cuisine\"]}) | Heat Level: {\"ðŸŒ¶\" * spicy_food[\"heat_level\"]})\ndef get_spicy_food_by_cuisine(spicy_foods, cuisine):\n    for spicy_food in spicy_foods:\n        if spicy_food[\"cuisine\"] == cuisine:\n            return spicy_food\ndef print_spiciest_foods(spicy_foods):\n    spiciest_foods = get_spiciest_foods(spicy_foods)\n    print_spicy_foods(spiciest_foods)",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "get_spicy_food_by_cuisine",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def get_spicy_food_by_cuisine(spicy_foods, cuisine):\n    for spicy_food in spicy_foods:\n        if spicy_food[\"cuisine\"] == cuisine:\n            return spicy_food\ndef print_spiciest_foods(spicy_foods):\n    spiciest_foods = get_spiciest_foods(spicy_foods)\n    print_spicy_foods(spiciest_foods)\ndef get_average_heat_level(spicy_foods):\n    total_heat = sum(food[\"heat_level\"] for food in spicy_foods)\n    return total_heat / len(spicy_foods)",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "print_spiciest_foods",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def print_spiciest_foods(spicy_foods):\n    spiciest_foods = get_spiciest_foods(spicy_foods)\n    print_spicy_foods(spiciest_foods)\ndef get_average_heat_level(spicy_foods):\n    total_heat = sum(food[\"heat_level\"] for food in spicy_foods)\n    return total_heat / len(spicy_foods)\ndef create_spicy_food(spicy_foods, spicy_food):\n    spicy_foods.append(spicy_food)\n    return spicy_foods",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "get_average_heat_level",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def get_average_heat_level(spicy_foods):\n    total_heat = sum(food[\"heat_level\"] for food in spicy_foods)\n    return total_heat / len(spicy_foods)\ndef create_spicy_food(spicy_foods, spicy_food):\n    spicy_foods.append(spicy_food)\n    return spicy_foods",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "create_spicy_food",
        "kind": 2,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "def create_spicy_food(spicy_foods, spicy_food):\n    spicy_foods.append(spicy_food)\n    return spicy_foods",
        "detail": "lib.data_structures",
        "documentation": {}
    },
    {
        "label": "spicy_foods",
        "kind": 5,
        "importPath": "lib.data_structures",
        "description": "lib.data_structures",
        "peekOfCode": "spicy_foods = [\n    {\n        \"name\": \"Green Curry\",\n        \"cuisine\": \"Thai\",\n        \"heat_level\": 9,\n    },\n    {\n        \"name\": \"Buffalo Wings\",\n        \"cuisine\": \"American\",\n        \"heat_level\": 3,",
        "detail": "lib.data_structures",
        "documentation": {}
    }
]